import { RpIdSchema } from "./rp-data";
import * as yup from 'yup';

/**
 * クレデンシャル情報
 */
export interface CredentialData {
	rpId : string,
	userId : string,
	credentialId : string,
	credentialName? : string,
	credentialAttributes? : { [key : string] : any} | null,
	format : string,
	userPresence : boolean,
	userVerification : boolean,
	backupEligibility : boolean,
	backupState : boolean,
	attestedCredentialData : boolean,
	extensionData : boolean,
	aaguid? : string,
	aaguidModelName? : string,
	publicKey : string,
	transportsRaw? : string,
	transportsBle? : boolean,
	transportsHybrid? : boolean,
	transportsInternal? : boolean,
	transportsNfc? : boolean,
	transportsUsb? : boolean,
	discoverableCredential? : boolean,
	enterpriseAttestation : boolean,
	vendorId? : string,
	authenticatorId? : string,
	attestationObject : string,
	authenticatorAttachment? : string,
	credentialType : string,
	clientDataJson : string,
	clientDataJsonRaw : string,
	lastAuthenticated? : Date,
	lastSignCounter? : number,
	disabled : boolean,
	registered? : Date,
	updated? : Date,
};
export interface CredentialDataUpdateParameter {
	userId : string,
	credentialId : string,
	credentialName? : string,
	credentialAttributes? : { [key : string] : any} | string | null,
	disabled : boolean,
	updated? : Date,
}
/**
 * スキーマ定義
 * ※サーバー応答のキャスト用。バリデーション処理が必要であれば別途要定義。
 */
export const CredentialDataSchema = yup.object().shape({
	rpId : RpIdSchema,
	userId : yup.string(),
	credentialId : yup.string(),
	credentialName : yup.string(),
	credentialAttributes : yup.mixed().nullable(),
	format : yup.string(),
	userPresence : yup.bool(),
	userVerification : yup.bool(),
	backupEligibility : yup.bool(),
	backupState : yup.bool(),
	attestedCredentialData : yup.bool(),
	extensionData : yup.bool(),
	aaguid : yup.string().nullable(),
	aaguidModelName : yup.string().nullable(),
	publicKey : yup.string(),
	transportsRaw : yup.string().nullable(),
	transportsBle : yup.bool().nullable(),
	transportsHybrid : yup.bool().nullable(),
	transportsInternal : yup.bool().nullable(),
	transportsNfc : yup.bool().nullable(),
	transportsUsb : yup.bool().nullable(),
	discoverableCredential : yup.bool().nullable(),
	enterpriseAttestation : yup.bool().nullable(),
	vendorId : yup.string().nullable(),
	authenticatorId : yup.string().nullable(),
	attestationObject : yup.string(),
	authenticatorAttachment : yup.string().nullable(),
	credentialType : yup.string(),
	clientDataJson : yup.string(),
	clientDataJsonRaw : yup.string(),
	lastAuthenticated : yup.date().nullable(),
	lastSignCounter : yup.number().nullable(),
	disabled : yup.bool(),
	registered : yup.date(),
	updated : yup.date(),
});
